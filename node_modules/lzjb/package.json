{
  "name": "lzjb",
  "version": "0.0.2",
  "author": {
    "name": "Bear, C. Scott Ananian"
  },
  "description": "pure JavaScript LZJB de/compression, for node.js, volo, and the browser.",
  "keywords": [
    "lzjb",
    "compression",
    "decompression"
  ],
  "main": "main",
  "repository": {
    "type": "git",
    "url": "https://github.com/cscott/lzjb.git"
  },
  "license": "BSD",
  "bin": {
    "lzjb": "./bin/lzjb"
  },
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "amdefine": "~0.0.4",
    "commander": "~1.1.1"
  },
  "devDependencies": {
    "mocha": "~1.8.1"
  },
  "scripts": {
    "test": "mocha"
  },
  "amd": {},
  "volo": {},
  "readme": "# lzjb\n\n`lzjb` is a fast pure JavaScript implementation of LZJB\ncompression/decompression.  It was originally written by \"Bear\"\nbased on the OpenSolaris C implementations.\nC. Scott Ananian cleaned up the source code and packaged it for `node`\nand `volo`.\n\n## How to install\n\n```\nnpm install lzjb\n```\nor\n```\nvolo add cscott/lzjb\n```\n\nThis package uses\n[Typed Arrays](https://developer.mozilla.org/en-US/docs/JavaScript/Typed_arrays)\nand so requires node.js >= 0.5.5.  Full browser compatibility table\nis available at [caniuse.com](http://caniuse.com/typedarrays); briefly:\nIE 10, Firefox 4, Chrome 7, or Safari 5.1.\n\n## Testing\n\n```\nnpm install\nnpm test\n```\n\n## Usage\n\nThere is a binary available in bin:\n```\n$ bin/lzjb --help\n$ echo \"Test me\" | bin/lzjb -z > test.lzjb\n$ bin/lzjb -d test.lzjb\nTest me\n```\n\nFrom JavaScript:\n```\nvar lzjb = require('lzjb');\nvar data = new Buffer('Example data', 'utf8');\nvar compressed = lzjb.compressFile(data);\nvar uncompressed = lzjb.uncompressFile(compressed);\n// convert from array back to string\nvar data2 = new Buffer(uncompressed).toString('utf8');\nconsole.log(data2);\n```\nThere is a streaming interface as well.\n\nSee the tests in the `tests/` directory for further usage examples.\n\n## Documentation\n\n`require('lzjb')` returns a `lzjb` object.  It contains two main\nmethods.  The first is a function accepting one, two or three parameters:\n\n`lzjb.compressFile = function(input, [output], [Number compressionLevel])`\n\nThe `input` argument can be a \"stream\" object (which must implement the\n`readByte` method), or a `Uint8Array`, `Buffer`, or array.\n\nIf you omit the second argument, `compressFile` will return a JavaScript\narray containing the byte values of the compressed data.  If you pass\na second argument, it must be a \"stream\" object (which must implement the\n`writeByte` method).\n\nThe third argument may be omitted, or a number between 1 and 9 indicating\na compression level (1 being largest/fastest compression and 9 being\nsmallest/slowest compression).  The default is `1`. `6` is about twice\nas slow but creates 10% smaller files.\n\nThe second exported method is a function accepting one or two parameters:\n\n`lzjb.decompressFile = function(input, [output])`\n\nThe `input` parameter is as above.\n\nIf you omit the second argument, `decompressFile` will return a\n`Uint8Array`, `Buffer` or JavaScript array with the decompressed\ndata, depending on what your platform supports.  For most modern\nplatforms (modern browsers, recent node.js releases) the returned\nvalue will be a `Uint8Array`.\n\nIf you provide the second argument, it must be a \"stream\", implementing\nthe `writeByte` method.\n\n## Related projects\n\n* https://code.google.com/p/jslzjb/ Original JavaScript port by Bear\n* http://en.wikipedia.org/wiki/LZJB Wikipedia article on LZJB compression\n* http://src.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/uts/common/os/compress.c \"compress\" source code (describes LZJB algorithm)\n* http://cvs.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/uts/common/fs/zfs/lzjb.c In-kernel implementation of LZJB\n\n## Other JavaScript compressors\n\n* https://github.com/cscott/lzma-purejs LZMA\n* https://github.com/cscott/seek-bzip Bzip2 (random-access decompression)\n\n## License\n\n> Copyright (c) 2010 Nuwa Information Co., Ltd, and individual contributors.\n>\n> Copyright (c) 2013 C. Scott Ananian\n>\n> All rights reserved.\n>\n> Redistribution and use in source and binary forms, with or without\n> modification, are permitted provided that the following conditions are met:\n>\n>   1. Redistributions of source code must retain the above copyright notice,\n>      this list of conditions and the following disclaimer.\n>\n>   2. Redistributions in binary form must reproduce the above copyright\n>      notice, this list of conditions and the following disclaimer in the\n>      documentation and/or other materials provided with the distribution.\n>\n>   3. Neither the name of Nuwa Information nor the names of its contributors\n>      may be used to endorse or promote products derived from this software\n>      without specific prior written permission.\n>\n> THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n> AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n> IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n> DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n> FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n> DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n> SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n> CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n> OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n> OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
  "readmeFilename": "README.md",
  "_id": "lzjb@0.0.2",
  "_from": "lzjb@~0.0.2"
}
